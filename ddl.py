import json
import pandas as pd
import duckdb
import os

DB_FILE = 'my.db'

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ë–î (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞ —á–∏—Å—Ç–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)
if os.path.exists(DB_FILE):
    os.remove(DB_FILE)
    print("üóëÔ∏è –°—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª—ë–Ω.")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
with open('tables.json') as f:
    tables_dict = json.load(f)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –∏–∑ SQL
def create_tables():
    try:
        with open('queries/tables.sql') as f:
            tables_query = f.read()

        with duckdb.connect(DB_FILE) as duck:
            duck.execute(tables_query)

            # –û—Ç–ª–∞–¥–∫–∞: –≤—ã–≤–æ–¥–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü
            print("\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã patients_1:")
            info = duck.execute("PRAGMA table_info('patients_1')").fetchdf()
            print(info)

        print("\n‚úÖ Tables created successfully")

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü:", e)

# –ß—Ç–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ Excel
def read_xl(sheet_name, columns_dict):
    temp_df = pd.read_excel(
        'source/patients.xlsx',
        sheet_name=sheet_name,
        usecols=columns_dict.keys()
    ).rename(columns=columns_dict)

    # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ –∫ —Å—Ç—Ä–æ–∫–∞–º –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤
    for col in temp_df.columns:
        if temp_df[col].dtype == object:
            temp_df[col] = temp_df[col].astype(str).str.strip()

    # –£–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É, —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤ JSON
    expected_order = list(columns_dict.values())
    temp_df = temp_df[expected_order]

    return temp_df

# –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def insert_to_db(temp_df, tbl_name):
    with duckdb.connect(DB_FILE) as duck:
        duck.register('temp_table', temp_df)

        # üü° –û—Ç–ª–∞–¥–∫–∞ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π
        print(f"\nüîé –ü–æ–∫–∞–∑ –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è {tbl_name}:")
        print(temp_df.head())
        print(temp_df.dtypes)

        # üëá –Ø–í–ù–û —É–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø—É—Ç–∞–Ω–∏—Ü—ã –ø–æ –ø–æ–∑–∏—Ü–∏—è–º)
        columns = ", ".join(temp_df.columns)
        duck.execute(f"""
            INSERT INTO {tbl_name} ({columns})
            SELECT {columns} FROM temp_table
        """)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π
def create_views():
    with open('queries/views.sql') as f:
        views = f.read()

    with duckdb.connect(DB_FILE) as duck:
        duck.execute(views)
        duck.commit()

    print("‚úÖ Views were successfully created")

# ETL: Excel ‚Üí DuckDB
def xl_etl(sheet_name, columns_dict, tbl_name):
    print(f"üì• Inserting data to {tbl_name}...")
    temp_df = read_xl(sheet_name, columns_dict)
    insert_to_db(temp_df, tbl_name)

# –ì–ª–∞–≤–Ω—ã–π pipeline
def create_n_insert():
    print("üöÄ –ó–∞–ø—É—Å–∫ create_n_insert")

    create_tables()

    for k, v in tables_dict.items():
        xl_etl(k, v["columns"], v["table_name"])

    print("‚úÖ Data inserted successfully")

    create_views()

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    create_n_insert()
