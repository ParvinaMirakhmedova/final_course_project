import streamlit as st
import pandas as pd
import plotly.express as px
from db import fetch_patients

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="Diabetes Dashboard", layout="wide")

# üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ DuckDB
@st.cache_data
def load_data():
    return fetch_patients()

df = load_data()

# ---------- –§–ò–õ–¨–¢–†–´ ----------
st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã")

# üîÅ –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
if st.sidebar.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"):
    st.rerun()

# üß© –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä (–ø–æ–ª, —Ç–∏–ø –¥–∏–∞–±–µ—Ç–∞)
def apply_categorical_filter(df, column, label):
    if column not in df.columns:
        return df
    options = sorted(df[column].unique())
    selected = st.sidebar.multiselect(label, options, default=options)
    return df[df[column].isin(selected)]

# üìä –ß–∏—Å–ª–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä (BMI, –≤–æ–∑—Ä–∞—Å—Ç, FBG)
def apply_numerical_filter(df, column, label):
    if column not in df.columns:
        return df
    min_val, max_val = float(df[column].min()), float(df[column].max())
    selected_range = st.sidebar.slider(label, min_val, max_val, (min_val, max_val))
    return df[df[column].between(*selected_range)]


# ‚úÖ –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
df = apply_categorical_filter(df, "sex", "–ü–æ–ª")
df = apply_categorical_filter(df, "dm_type", "–¢–∏–ø –¥–∏–∞–±–µ—Ç–∞")
df = apply_numerical_filter(df, "bmi", "BMI")
df = apply_numerical_filter(df, "age", "–í–æ–∑—Ä–∞—Å—Ç")
df = apply_numerical_filter(df, "fbg", "FBG")

# ---------- –û–°–ù–û–í–ù–û–ô –ö–û–ù–¢–ï–ù–¢ ----------
st.title("üìä Diabetes Patient Dashboard")
st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")
st.dataframe(df)

# ---------- –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø ----------
st.subheader("üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")

# –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–∏–ø–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã
chart_type = st.selectbox(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∏–∞–≥—Ä–∞–º–º—ã:",
    [
        "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ BMI",
        "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ FBG",
        "BMI vs FBG (–ø–æ –ø–æ–ª—É)",
        "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø—É –¥–∏–∞–±–µ—Ç–∞ (pie)",
        "–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –ø–æ –ø–æ–ª—É (bar)",
        "–¢–∏–ø –¥–∏–∞–±–µ—Ç–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –∏ BMI (scatter)"
    ]
)

# 1. –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ BMI
if chart_type == "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ BMI" and "bmi" in df.columns:
    st.plotly_chart(
        px.histogram(df,
                    x="bmi",
                    nbins=25, 
                    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ BMI", 
                    color_discrete_sequence=["#2ca02c"]),
        use_container_width=True
    )

# 2. –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ FBG
elif chart_type == "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ FBG" and "fbg" in df.columns:
    st.plotly_chart(
        px.histogram(df, 
                     x="fbg", 
                     nbins=20, 
                     title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ FBG",
                     color_discrete_sequence=["#ff7f0e"]),
        use_container_width=True
    )

# 3. Scatter: BMI vs FBG, —Ü–≤–µ—Ç ‚Äî –ø–æ–ª
elif chart_type == "BMI vs FBG (–ø–æ –ø–æ–ª—É)" and all(col in df.columns for col in ["bmi", "fbg", "sex"]):
    st.plotly_chart(
        px.scatter(df, 
                   x="bmi", 
                   y="fbg", 
                   color="sex", 
                   title="BMI vs FBG", 
                   hover_data=["full_name"],
                   color_discrete_map={
        "female": "#e377c2",  # —Ä–æ–∑–æ–≤—ã–π
        "male": "#1f77b4"} #—Å–∏–Ω–∏–π
        ),
        use_container_width=True
    )

# 4. Pie: –ø–æ —Ç–∏–ø—É –¥–∏–∞–±–µ—Ç–∞
elif chart_type == "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø—É –¥–∏–∞–±–µ—Ç–∞ (pie)" and "dm_type" in df.columns:
    st.plotly_chart(
        px.pie(df, names="dm_type", title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø—É –¥–∏–∞–±–µ—Ç–∞"),
        use_container_width=True
    )

# 5. Bar: —Å—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –ø–æ –ø–æ–ª—É
elif chart_type == "–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –ø–æ –ø–æ–ª—É (bar)" and all(col in df.columns for col in ["sex", "age"]):
    avg_age = df.groupby("sex")["age"].mean().reset_index()
    st.plotly_chart(
        px.bar(
            avg_age,
            x="sex",
            y="age",
            title="–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –ø–æ –ø–æ–ª—É",
            hover_data=["age"],
            text_auto=".1f",  # –ø–æ–¥–ø–∏—Å–∏ –Ω–∞ –∫–æ–ª–æ–Ω–∫–∞—Ö, 1 –∑–Ω–∞–∫ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            color="sex",
            color_discrete_map={
                "female": "#e377c2",
                "male": "#1f77b4",
            }
        ),
        use_container_width=True
    )


# 6. Scatter: —Ç–∏–ø –¥–∏–∞–±–µ—Ç–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –∏ BMI
elif chart_type == "–¢–∏–ø –¥–∏–∞–±–µ—Ç–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –∏ BMI (scatter)" and all(col in df.columns for col in ["dm_type", "age", "bmi"]):
    st.plotly_chart(
        px.scatter(
            df, x="age", y="bmi", color="dm_type",
            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∏–∞–±–µ—Ç–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –∏ BMI",
            hover_data=["full_name", "sex"]
        ),
        use_container_width=True
    )
